To address the new requirements and questions, I'll extend the CloudFormation template from Assignment 1.

```yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: Create a virtual machine in a VPC

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref RouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref 'AWS::Region', AmazonLinux2023 ]
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h>Hello Conclusion Xforce</h>" > /var/www/html/index.html
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CW_AGENT_SSM_PARAM} -s

  CWAgentSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "ApacheAccessLog",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "ApacheErrorLog",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "collectd": {},
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is high"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      TreatMissingData: "missing"
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is low"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "20"
      ComparisonOperator: "LessThanOrEqualToThreshold"
      AlarmActions

:
        - !Ref ScaleInPolicy
      TreatMissingData: "missing"

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "1"

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "-1"

  EC2InstanceASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"

  EC2LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          services:
            sysvinit:
              cw_agent:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AmazonLinux2023 ]
      InstanceType: "t2.micro"
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h>Hello Conclusion Xforce</h>" > /var/www/html/index.html
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CW_AGENT_SSM_PARAM} -s

  CWAgentSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "ApacheAccessLog",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "ApacheErrorLog",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "collectd": {},
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is high"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      TreatMissingData: "missing"
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is low"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "20"
      ComparisonOperator: "LessThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleInPolicy
      TreatMissingData: "missing"

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "1"

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "-1"

  EC2InstanceASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"

  EC2LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          services:
            sysvinit:
              cw_agent:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AmazonLinux2023 ]
      InstanceType: "t2.micro"
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h>Hello Conclusion Xforce</h>" > /var/www/html/index.html
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CW_AGENT_SSM_PARAM} -s

  CWAgentSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "ApacheAccessLog",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "ApacheErrorLog",
                    "log_stream_name": "{

instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "collectd": {},
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is high"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      TreatMissingData: "missing"
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is low"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "20"
      ComparisonOperator: "LessThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleInPolicy
      TreatMissingData: "missing"

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "1"

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "-1"

  EC2InstanceASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"

  EC2LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          services:
            sysvinit:
              cw_agent:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AmazonLinux2023 ]
      InstanceType: "t2.micro"
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h>Hello Conclusion Xforce</h>" > /var/www/html/index.html
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CW_AGENT_SSM_PARAM} -s

  CWAgentSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "ApacheAccessLog",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "ApacheErrorLog",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "collectd": {},
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is high"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      TreatMissingData: "missing"
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is low"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "20"
      ComparisonOperator: "LessThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleInPolicy
      TreatMissingData: "missing"

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "1"

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "-1"

  EC2InstanceASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZ

s ""
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"

  EC2LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          services:
            sysvinit:
              cw_agent:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AmazonLinux2023 ]
      InstanceType: "t2.micro"
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h>Hello Conclusion Xforce</h>" > /var/www/html/index.html
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CW_AGENT_SSM_PARAM} -s

  CWAgentSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "ApacheAccessLog",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "ApacheErrorLog",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "collectd": {},
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is high"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      TreatMissingData: "missing"
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is low"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "20"
      ComparisonOperator: "LessThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleInPolicy
      TreatMissingData: "missing"

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "1"

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "-1"

  EC2InstanceASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"

  EC2LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          services:
            sysvinit:
              cw_agent:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AmazonLinux2023 ]
      InstanceType: "t2.micro"
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h>Hello Conclusion Xforce</h>" > /var/www/html/index.html
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CW_AGENT_SSM_PARAM} -s

  CWAgentSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "ApacheAccessLog",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "ApacheErrorLog",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "collectd": {},
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
         

 }
        }

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is high"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      TreatMissingData: "missing"
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is low"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "20"
      ComparisonOperator: "LessThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleInPolicy
      TreatMissingData: "missing"

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "1"

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "-1"

  EC2InstanceASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"

  EC2LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          services:
            sysvinit:
              cw_agent:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AmazonLinux2023 ]
      InstanceType: "t2.micro"
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h>Hello Conclusion Xforce</h>" > /var/www/html/index.html
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CW_AGENT_SSM_PARAM} -s

  CWAgentSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "ApacheAccessLog",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "ApacheErrorLog",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "collectd": {},
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is high"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      TreatMissingData: "missing"
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is low"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "20"
      ComparisonOperator: "LessThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleInPolicy
      TreatMissingData: "missing"

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName

: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "1"

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "-1"

  EC2InstanceASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"

  EC2LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          services:
            sysvinit:
              cw_agent:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AmazonLinux2023 ]
      InstanceType: "t2.micro"
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h>Hello Conclusion Xforce</h>" > /var/www/html/index.html
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CW_AGENT_SSM_PARAM} -s

  CWAgentSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "ApacheAccessLog",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "ApacheErrorLog",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "collectd": {},
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is high"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      TreatMissingData: "missing"
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is low"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "20"
      ComparisonOperator: "LessThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleInPolicy
      TreatMissingData: "missing"

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "1"

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "-1"

  EC2InstanceASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"

  EC2LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          services:
            sysvinit:
              cw_agent:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AmazonLinux2023 ]
      InstanceType: "t2.micro"
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h>Hello Conclusion Xforce</h>" > /var/www/html/index.html
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CW_AGENT_SSM_PARAM} -s

  CWAgentSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "ApacheAccessLog",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "ApacheErrorLog",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "collectd": {},
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu

_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is high"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      TreatMissingData: "missing"
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is low"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "20"
      ComparisonOperator: "LessThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleInPolicy
      TreatMissingData: "missing"

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "1"

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "-1"

  EC2InstanceASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"

  EC2LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          services:
            sysvinit:
              cw_agent:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AmazonLinux2023 ]
      InstanceType: "t2.micro"
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h>Hello Conclusion Xforce</h>" > /var/www/html/index.html
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CW_AGENT_SSM_PARAM} -s

  CWAgentSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "ApacheAccessLog",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "ApacheErrorLog",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "collectd": {},
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is high"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      TreatMissingData: "missing"
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is low"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "20"
      ComparisonOperator: "LessThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleInPolicy
      TreatMissingData: "missing"

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "1"

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "-1"

  EC2InstanceASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"

  EC2LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
           

 yum:
              amazon-cloudwatch-agent: []
          services:
            sysvinit:
              cw_agent:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AmazonLinux2023 ]
      InstanceType: "t2.micro"
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h>Hello Conclusion Xforce</h>" > /var/www/html/index.html
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CW_AGENT_SSM_PARAM} -s

  CWAgentSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "ApacheAccessLog",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "ApacheErrorLog",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "collectd": {},
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is high"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      TreatMissingData: "missing"
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is low"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "20"
      ComparisonOperator: "LessThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleInPolicy
      TreatMissingData: "missing"

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "1"

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "-1"

  EC2InstanceASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"

  EC2LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          services:
            sysvinit:
              cw_agent:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AmazonLinux2023 ]
      InstanceType: "t2.micro"
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h>Hello Conclusion Xforce</h>" > /var/www/html/index.html
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CW_AGENT_SSM_PARAM} -s

  CWAgentSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "ApacheAccessLog",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "ApacheErrorLog",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "collectd": {},
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is high"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average

"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      TreatMissingData: "missing"
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is low"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "20"
      ComparisonOperator: "LessThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleInPolicy
      TreatMissingData: "missing"

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "1"

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "-1"

  EC2InstanceASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"

  EC2LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          services:
            sysvinit:
              cw_agent:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AmazonLinux2023 ]
      InstanceType: "t2.micro"
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h>Hello Conclusion Xforce</h>" > /var/www/html/index.html
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CW_AGENT_SSM_PARAM} -s

  CWAgentSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "ApacheAccessLog",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "ApacheErrorLog",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "collectd": {},
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is high"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      TreatMissingData: "missing"
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is low"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "20"
      ComparisonOperator: "LessThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleInPolicy
      TreatMissingData: "missing"

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "1"

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "-1"

  EC2InstanceASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"

  EC2LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          services:
            sysvinit:
              cw_agent:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AmazonLinux2023 ]
      InstanceType: "t2.micro"
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h>Hello Conclusion Xforce</h>" > /var/www/html/index.html
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloud

watch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CW_AGENT_SSM_PARAM} -s

  CWAgentSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "ApacheAccessLog",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "ApacheErrorLog",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "collectd": {},
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is high"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      TreatMissingData: "missing"
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization is low"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "20"
      ComparisonOperator: "LessThanOrEqualToThreshold"
      AlarmActions:
        - !Ref ScaleInPolicy
      TreatMissingData: "missing"

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "1"

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref EC2InstanceASG
      Cooldown: "300"
      ScalingAdjustment: "-1"

Sure, here are the answers to your questions:

### There are at least 3 solutions for the last question (depending on which resources you deployed in assignment 1). What solutions do you know?

1. **Security Group**: You can update the security group associated with your EC2 instance to block traffic from the hacker's IP address.
   
   ```yaml
   HackerSecurityGroupIngress:
     Type: AWS::EC2::SecurityGroupIngress
     Properties:
       GroupId: !Ref SecurityGroup
       IpProtocol: tcp
       FromPort: 80
       ToPort: 80
       CidrIp: "1.2.3.4/32"
   ```

2. **Network Access Control List (NACL)**: You can also block traffic at the subnet level using NACLs.

   ```yaml
   HackerNAclRule:
     Type: AWS::EC2::NetworkAclEntry
     Properties:
       NetworkAclId: !Ref SubnetNAcl
       RuleNumber: 100
       Protocol: 6
       RuleAction: deny
       Egress: false
       CidrBlock: "1.2.3.4/32"
       PortRange:
         From: 80
         To: 80
   ```

3. **Web Application Firewall (WAF)**: You can use AWS WAF to create a rule to block traffic from the hacker's IP address.

### In practice you will sometimes want to exclude certain countries, what solution do you use for this?

For excluding certain countries, you can use AWS WAF with Geo Match conditions. By creating an IP set that includes IP addresses associated with the countries you want to block and then creating a rule in a web ACL that uses the IP set, you can block traffic from those countries.

### As a cloud platform team, we would like to forward all access logs from Apache to Elastic Search. How can we best approach this?

To forward Apache access logs to Elasticsearch, you can use the AWS Elasticsearch Service. You can configure Apache to send access logs to CloudWatch Logs using the CloudWatch Logs agent, and then create a subscription filter to forward these logs to Amazon Elasticsearch Service.

### Suppose we want to forward all logs from all CloudWatch log groups to Elastic Search, how do we approach this in such a way that we never forget to implement the solution from the previous question?

You can create a Lambda function triggered by AWS CloudTrail events. This function would listen for `CreateLogGroup` events. When a new log group is created, the Lambda function would automatically add a subscription filter to forward logs to Amazon Elasticsearch Service.

```yaml
LogSubscriptionFilter:
  Type: AWS::Logs::SubscriptionFilter
  DependsOn: LogGroup
  Properties:
    LogGroupName: !Ref LogGroup
    DestinationArn: !GetAtt ElasticsearchDomain.Arn
    FilterPattern: ""
```

By adding this to your CloudFormation template, you ensure that any new log group created in the future will automatically have logs forwarded to Elasticsearch.