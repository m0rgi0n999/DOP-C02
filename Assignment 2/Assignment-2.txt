Assignment 2) Respond to logs

· Continue working with the template from assignment 1. Save the solution from assignment 1 as a separate template, we will continue with this template from assignment 1 in later assignments.

· A hacker has been spotted! It turns out that it has a rather special method: as soon as it starts it requests the non-existent page 1.2.3.4/ik-kom-eraan. He then gives a parameter how intensively he is working, if he only wants to look around, he calls, for example, 1.2.3.4/ik-kom-eraan?severity=low. If he wants to shut things down, he calls 1.2.3.4/ik-kom-eraan?severity=high.

· Security would like to know when the hacker is working, they would like to receive an email when the hacker logs in (regardless of the parameter provided).

· As a cloud platform team, you also want to be warned, but only just before he really starts to do something terrible, so only with the parameter ?severity=high. You also want to know the IP address it works with. Ensure that the Cloud Platform Team receives an email with the hacker's IP address at ?sevirity=high

· Now that we know the hacker's IP address, we can also tackle the hacker. Make sure that people with this specific IP address no longer enter our site.

Questions:

· There are at least 3 solutions for the last question (depending on which resources you deployed in assignment 1). What solutions do you know?

· In practice you will sometimes want to exclude certain countries, what solution do you use for this?

· As a cloud platform team, we would like to forward all access logs from Apache to Elastic Search. How can we best approach this?

· Suppose we want to forward all logs from all CloudWatch log groups to Elastic Search, how do we approach this in such a way that we never forget to implement the solution from the previous question?


### There are at least 3 solutions for the last question (depending on which resources you deployed in assignment 1). What solutions do you know?

1. **Security Group**: You can update the security group associated with your EC2 instance to block traffic from the hacker's IP address.
   
   ```yaml
   HackerSecurityGroupIngress:
     Type: AWS::EC2::SecurityGroupIngress
     Properties:
       GroupId: !Ref SecurityGroup
       IpProtocol: tcp
       FromPort: 80
       ToPort: 80
       CidrIp: "1.2.3.4/32"
   ```

2. **Network Access Control List (NACL)**: You can also block traffic at the subnet level using NACLs.

   ```yaml
   HackerNAclRule:
     Type: AWS::EC2::NetworkAclEntry
     Properties:
       NetworkAclId: !Ref SubnetNAcl
       RuleNumber: 100
       Protocol: 6
       RuleAction: deny
       Egress: false
       CidrBlock: "1.2.3.4/32"
       PortRange:
         From: 80
         To: 80
   ```

3. **Web Application Firewall (WAF)**: You can use AWS WAF to create a rule to block traffic from the hacker's IP address.

### In practice you will sometimes want to exclude certain countries, what solution do you use for this?

For excluding certain countries, you can use AWS WAF with Geo Match conditions. By creating an IP set that includes IP addresses associated with the countries you want to block and then creating a rule in a web ACL that uses the IP set, you can block traffic from those countries.

### As a cloud platform team, we would like to forward all access logs from Apache to Elastic Search. How can we best approach this?

To forward Apache access logs to Elasticsearch, you can use the AWS Elasticsearch Service. You can configure Apache to send access logs to CloudWatch Logs using the CloudWatch Logs agent, and then create a subscription filter to forward these logs to Amazon Elasticsearch Service.

### Suppose we want to forward all logs from all CloudWatch log groups to Elastic Search, how do we approach this in such a way that we never forget to implement the solution from the previous question?

You can create a Lambda function triggered by AWS CloudTrail events. This function would listen for `CreateLogGroup` events. When a new log group is created, the Lambda function would automatically add a subscription filter to forward logs to Amazon Elasticsearch Service.

```yaml
LogSubscriptionFilter:
  Type: AWS::Logs::SubscriptionFilter
  DependsOn: LogGroup
  Properties:
    LogGroupName: !Ref LogGroup
    DestinationArn: !GetAtt ElasticsearchDomain.Arn
    FilterPattern: ""
```

By adding this to your CloudFormation template, you ensure that any new log group created in the future will automatically have logs forwarded to Elasticsearch.