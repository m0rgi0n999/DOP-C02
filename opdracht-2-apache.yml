AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating VPC with EC2 instance running Apache web server

Parameters:
  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: "10.0.0.0/16"
  Subnet1CIDR:
    Description: CIDR block for Subnet 1
    Type: String
    Default: "10.0.1.0/24"
  Subnet2CIDR:
    Description: CIDR block for Subnet 2
    Type: String
    Default: "10.0.2.0/24"
  Subnet3CIDR:
    Description: CIDR block for Subnet 3
    Type: String
    Default: "10.0.3.0/24"
  KeyName:
    Description: Name of the EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
    Default: ErwinR-opdrachten
  InstanceType:
    Description: EC2 Instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: PublicSubnet1
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref Subnet1CIDR
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: PublicSubnet2
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref Subnet2CIDR
      MapPublicIpOnLaunch: true

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: PublicSubnet3
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Ref Subnet3CIDR
      MapPublicIpOnLaunch: true

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  SecurityAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: SecurityAlerts
      Subscription:
        - Endpoint: erwin.rijvers@conclusionxforce.nl
          Protocol: email

  CloudPlatformTeamAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: CloudPlatformTeamAlerts
      Subscription:
        - Endpoint: erwin.rijvers@conclusionxforce.nl
          Protocol: email

  LowSeverityMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: ApacheAccessLog
      FilterPattern: "[ip, identity, user_id, timestamp, request, status_code, bytes]"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "ApacheAccessLogs"
          MetricName: "IKKomEraanLowSeverity"

  HighSeverityMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: ApacheAccessLog
      FilterPattern: "[ip, identity, user_id, timestamp, request, status_code, bytes]"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "ApacheAccessLogs"
          MetricName: "IKKomEraanHighSeverity"

  LowSeverityAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm for /ik-kom-eraan?severity=low"
      Namespace: "AWS/Logs"
      MetricName: "IKKomEraanLowSeverityCount"
      Dimensions:
        - Name: "ApacheAccessLog"
          Value: "APACHEACCESSLOG"
      Statistic: "Sum"
      Period: 300  # 5 minutes
      EvaluationPeriods: 1
      Threshold: 1  # Adjust as per your threshold requirement
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref SecurityAlertsTopicARN

  HighSeverityAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm for /ik-kom-eraan?severity=high"
      Namespace: "AWS/Logs"
      MetricName: "IKKomEraanHighSeverityCount"
      Dimensions:
        - Name: "ApacheAccessLog"
          Value: "APACHEACCESSLOG"
      Statistic: "Sum"
      Period: 300  # 5 minutes
      EvaluationPeriods: 1
      Threshold: 1  # Adjust as per your threshold requirement
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref SecurityAlertsTopicARN
        - !Ref CloudPlatformTeamAlertsTopicARN

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [ !Ref EC2Role ]

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource: "*"

  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      ImageId:
        Fn::Sub: "{{resolve:ssm:/my-ami/ami-0551ce4d67096d606}}"
      SecurityGroupIds:
        - !Ref MySecurityGroup
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Opdracht2
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Get the latest CloudFormation package
            dnf update -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r MyInstance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
    Metadata:
      Comment: install Apache HTTP
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              amazon-cloudwatch-agent: []
              collectd: []
          files:
            "/var/www/html/index.html":
              content: |
                <html><body><h1>Hello Conclusion Xforce</h1>
                <p>Created with cfn-init</p></body></html>
              mode: '000644'
            "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json":
              content: |
                {
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/httpd/access_log",
                            "log_group_name": "ApacheAccessLog",
                            "log_stream_name": "{instance_id}"
                          },
                          {
                            "file_path": "/var/log/httpd/error_log",
                            "log_group_name": "ApacheErrorLog",
                            "log_stream_name": "{instance_id}"
                          }
                        ]
                      }
                    }
                  },
                  "metrics": {
                    "metrics_collected": {
                      "collectd": {},
                      "cpu": {
                        "measurement": [
                          "cpu_usage_idle",
                          "cpu_usage_iowait",
                          "cpu_usage_user",
                          "cpu_usage_system"
                        ],
                        "metrics_collection_interval": 60,
                        "totalcpu": true
                      },
                      "disk": {
                        "measurement": [
                          "used_percent"
                        ],
                        "metrics_collection_interval": 60,
                        "resources": [
                          "*"

Outputs:
  InstanceId:
    Description: Instance Id of the newly created EC2 instance
    Value: !GetAtt ComputeStack.Outputs.InstanceId
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt ComputeStack.Outputs.PublicIP
  SecurityAlertsTopicARN:
    Description: ARN of the Security SNS topic created
    Value: !Ref SecurityAlertsTopic
    Export:
      Name: SecurityAlertsTopicARN
  CloudPlatformTeamAlertsTopicARN:
    Description: ARN of the Cloud Platforms SNS topic created
    Value: !Ref CloudPlatformTeamAlertsTopic
    Export:
      Name: CloudPlatformTeamAlertsTopicARN
