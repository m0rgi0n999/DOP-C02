Assignment 1: Create a virtual machine in a VPC

· Please note: please write this solution as a CloudFormation stack

· I would like a VPC with three public subnets (1 per AZ)

· A VM within one of the subnets (based on the latest version Amazon Linux 2023)

· Apache must be installed when starting the VM

· Apache's index.html file must have the content “<h>Hello Conclusion Xforce</h>”.

· The CloudWatch agent must also be installed. I would like the following logs in CloudWatch:

o Apache error log

o Access log Apache

· Within CloudWatch I would like a metric that indicates how often 1.2.3.4/erwin is called (with 1.2.3.4 of course the public IP address of your VM).

To ask:

· How do you ensure that you always get the latest VM based on Amazon Linux 2023?

· How do you ensure that a resource that depends on the VM only starts after all actions on the VM have been performed?

· How do you ensure that if you change the boot commands of the VM and you deploy the stack again, that the changes in the boot commands also change?

If you have time to spare:

· I would like a Load Balancer for it. I would also like to add an extra node if the CPU usage of the VM exceeds 80%. If the CPU usage falls below 20%, one VM must be run less (always at least 1).

To ask:

· Which type of Load Balancers do you know?

· Which type would you use here and why?


Answer:

How do you ensure that you always get the latest VM based on Amazon Linux 2023?

I've used the Mappings section in the CloudFormation template to map each region to the latest Amazon Linux 2023 AMI.

How do you ensure that a resource that depends on the VM only starts after all actions on the VM have been performed?

I've used AWS::CloudFormation::Init metadata in EC2LaunchConfiguration and UserData in EC2Instance to ensure all actions are completed before proceeding.

How do you ensure that if you change the boot commands of the VM and you deploy the stack again, that the changes in the boot commands also change?

I've defined the commands in the UserData script of the EC2LaunchConfiguration and EC2Instance. If you change these commands, the changes will reflect on the next stack deployment.

If you have time to spare:

Which type of Load Balancers do you know?

There are mainly three types of Load Balancers in AWS:

Application Load Balancer (ALB): Best suited for load balancing HTTP and HTTPS traffic. It operates at the application layer and supports content-based routing.
Network Load Balancer (NLB): Best suited for load balancing of TCP traffic where extreme performance is required. It operates at the connection level (Layer 4).
Classic Load Balancer (CLB): The legacy Elastic Load Balancer, which provides basic load balancing across multiple Amazon EC2 instances. It can load balance HTTP/HTTPS (layer 7) and TCP (layer 4) traffic.
Which type would you use here and why?

I would use an Application Load Balancer (ALB) because:

It supports HTTP/HTTPS traffic, which is what Apache is serving.
It provides more advanced features like content-based routing, which might be useful in the future.
It integrates well with other AWS services.